#!/usr/bin/env python3
"""
Script de instala√ß√£o e configura√ß√£o do Fermarc E-commerce
Automatiza o processo de setup do projeto
"""
import os
import sys
import subprocess
import shutil
from pathlib import Path


def print_header(message):
    """Imprime cabe√ßalho formatado"""
    print("\n" + "=" * 60)
    print(f"  {message}")
    print("=" * 60 + "\n")


def print_step(step, message):
    """Imprime passo da instala√ß√£o"""
    print(f"\n[{step}] {message}...")


def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    print_step("1/7", "Verificando vers√£o do Python")
    
    if sys.version_info < (3, 8):
        print("‚ùå Erro: Python 3.8 ou superior √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        sys.exit(1)
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro} detectado")


def create_env_file():
    """Cria arquivo .env a partir do .env.example"""
    print_step("2/7", "Configurando arquivo .env")
    
    if os.path.exists('.env'):
        response = input("   Arquivo .env j√° existe. Deseja sobrescrever? (s/n): ")
        if response.lower() != 's':
            print("   ‚è≠Ô∏è  Mantendo arquivo .env existente")
            return
    
    if os.path.exists('.env.example'):
        shutil.copy('.env.example', '.env')
        print("‚úÖ Arquivo .env criado com sucesso")
        print("‚ö†Ô∏è  IMPORTANTE: Edite o arquivo .env com suas configura√ß√µes!")
    else:
        print("‚ùå Arquivo .env.example n√£o encontrado")


def install_dependencies():
    """Instala depend√™ncias do projeto"""
    print_step("3/7", "Instalando depend√™ncias")
    
    try:
        subprocess.run(
            [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"],
            check=True
        )
        print("‚úÖ Depend√™ncias instaladas com sucesso")
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        sys.exit(1)


def setup_database():
    """Configura o banco de dados"""
    print_step("4/7", "Configurando banco de dados")
    
    # Verifica se j√° existe uma pasta migrations
    migrations_exists = os.path.exists('migrations') and os.path.exists('migrations/versions')
    
    if migrations_exists:
        print("   ‚ÑπÔ∏è  Migrations j√° configuradas")
        
        # Aplica migrations existentes
        try:
            result = subprocess.run(
                [sys.executable, "-m", "flask", "db", "upgrade"],
                env={**os.environ, 'FLASK_APP': 'run.py'},
                capture_output=True,
                text=True
            )
            if result.returncode == 0:
                print("‚úÖ Migrations aplicadas com sucesso")
            else:
                print(f"‚ö†Ô∏è  Aviso: {result.stderr}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Aviso ao aplicar migrations: {e}")
    else:
        print("   ‚ÑπÔ∏è  Inicializando migrations pela primeira vez")
        try:
            # Inicializa migrations
            subprocess.run(
                [sys.executable, "-m", "flask", "db", "init"],
                env={**os.environ, 'FLASK_APP': 'run.py'},
                check=True
            )
            
            # Cria migration inicial
            subprocess.run(
                [sys.executable, "-m", "flask", "db", "migrate", "-m", "Initial migration"],
                env={**os.environ, 'FLASK_APP': 'run.py'},
                check=True
            )
            
            # Aplica migration
            subprocess.run(
                [sys.executable, "-m", "flask", "db", "upgrade"],
                env={**os.environ, 'FLASK_APP': 'run.py'},
                check=True
            )
            
            print("‚úÖ Banco de dados configurado com sucesso")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao configurar banco de dados: {e}")
            sys.exit(1)


def populate_database():
    """Popula banco de dados com dados de exemplo"""
    print_step("5/7", "Populando banco de dados com dados de exemplo")
    
    response = input("   Deseja popular o banco com dados de exemplo? (s/n): ")
    
    if response.lower() == 's':
        try:
            subprocess.run(
                [sys.executable, "-m", "flask", "init-db"],
                env={**os.environ, 'FLASK_APP': 'run.py'},
                check=True
            )
            print("‚úÖ Dados de exemplo inseridos com sucesso")
            print("\n   üìã Credenciais de acesso:")
            print("   Admin - Email: admin@fermarc.com.br | Senha: admin123")
            print("   Cliente - Email: cliente@example.com | Senha: cliente123")
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è  Dados j√° existem ou erro ao popular banco")
    else:
        print("   ‚è≠Ô∏è  Banco de dados n√£o populado")


def create_upload_folder():
    """Cria pasta de uploads se n√£o existir"""
    print_step("6/7", "Verificando pastas necess√°rias")
    
    upload_folder = Path("app/static/uploads/products")
    upload_folder.mkdir(parents=True, exist_ok=True)
    
    print("‚úÖ Pastas criadas/verificadas")


def print_success():
    """Imprime mensagem de sucesso"""
    print_step("7/7", "Finaliza√ß√£o")
    
    print_header("üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO! üéâ")
    
    print("""
üìù Pr√≥ximos passos:

1. Edite o arquivo .env com suas configura√ß√µes:
   - SECRET_KEY (IMPORTANTE para produ√ß√£o!)
   - DATABASE_URL (se usar PostgreSQL)
   - Configura√ß√µes de email (opcional)
   - Chaves de pagamento (opcional)

2. Execute o servidor de desenvolvimento:
   python run.py

3. Acesse a aplica√ß√£o em:
   http://localhost:5000

4. Acesse o painel administrativo em:
   http://localhost:5000/admin
   
   Credenciais padr√£o:
   Email: admin@fermarc.com.br
   Senha: admin123

‚ö†Ô∏è  IMPORTANTE: 
   - Altere as senhas padr√£o em produ√ß√£o
   - Configure uma SECRET_KEY forte em produ√ß√£o
   - Use PostgreSQL em produ√ß√£o (n√£o SQLite)

üìö Documenta√ß√£o completa: README.md

Desenvolvido por Jo√£o Lion
""")


def main():
    """Fun√ß√£o principal"""
    print_header("FERMARC E-COMMERCE - INSTALA√á√ÉO")
    print("Sistema de e-commerce completo em Flask\n")
    
    try:
        check_python_version()
        create_env_file()
        install_dependencies()
        setup_database()
        populate_database()
        create_upload_folder()
        print_success()
        
    except KeyboardInterrupt:
        print("\n\n‚ùå Instala√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Erro inesperado: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
